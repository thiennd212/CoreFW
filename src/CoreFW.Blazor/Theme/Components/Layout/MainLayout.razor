@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Volo.Abp.AspNetCore.Components.Web.Theming.Toolbars
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.UI.Navigation
@using CoreFW.Blazor
@using Microsoft.AspNetCore.Components
@inherits CoreFWComponentBase

<div class="app-container">
    <header class="app-header">
        <div class="container-fluid">
            <div class="header-content">
                <div class="header-left">
                    <div class="header-logo">
                        <a href="/">CoreFW</a>
                    </div>
                </div>
                
                <div class="header-right">
                    <div class="header-toolbar">
                        <div class="header-item notification-badge">
                            <i class="fas fa-bell"></i>
                        </div>
                        <div class="header-item">
                            <i class="fas fa-cog"></i>
                        </div>
                        <div class="user-menu">
                            <div class="user-avatar">
                                <span>A</span>
                            </div>
                            <div class="user-info">
                                <span class="user-name">Admin</span>
                                <span class="user-role">Administrator</span>
                            </div>
                            <i class="fas fa-angle-down"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>
    
    <div class="app-body">
        <aside class="sidebar @(SidebarVisible ? "show" : "")">
            <div class="sidebar-menu">
                <div class="menu-item @(IsActive("/") ? "active" : "")">
                    <a href="/" class="menu-link">
                        <i class="fas fa-home"></i>
                        <span class="menu-text">Dashboard</span>
                    </a>
                </div>
                <div class="menu-item @(IsActive("/users") ? "active" : "")">
                    <a href="/users" class="menu-link">
                        <i class="fas fa-users"></i>
                        <span class="menu-text">Users</span>
                    </a>
                </div>
                <div class="menu-item @(IsActive("/settings") ? "active" : "")">
                    <a href="/settings" class="menu-link">
                        <i class="fas fa-cog"></i>
                        <span class="menu-text">Settings</span>
                    </a>
                </div>
                <div class="menu-item @(IsActive("/reports") ? "active" : "")">
                    <a href="/reports" class="menu-link">
                        <i class="fas fa-chart-bar"></i>
                        <span class="menu-text">Reports</span>
                    </a>
                </div>
            </div>
        </aside>
        
        <main class="main-content">
            <div class="page-section">
                @BodyContent
            </div>
        </main>
    </div>
    
    <footer class="app-footer">
        <div class="container-fluid">
            <div class="footer-content">
                <div class="footer-left">
                    Â© 2024 CoreFW - All rights reserved
                </div>
                <div class="footer-right">
                    <span>Version 1.0.0</span>
                </div>
            </div>
        </div>
    </footer>
</div>

@code {
    [Parameter]
    public RenderFragment? Body { get; set; }
    
    [Parameter]
    public RenderFragment? BodyContent { get; set; }
    
    protected List<ToolbarItem> Toolbar { get; set; } = new List<ToolbarItem>();
    protected ApplicationMenu Menu { get; set; } = new ApplicationMenu("MainMenu", "Main Menu");
    protected bool SidebarVisible { get; set; } = true;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    
    private void ToggleSidebar()
    {
        SidebarVisible = !SidebarVisible;
    }
    
    private bool IsActive(string path)
    {
        return NavigationManager.Uri.EndsWith(path, StringComparison.OrdinalIgnoreCase);
    }
} 